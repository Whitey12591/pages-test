{"version":3,"sources":["Components/TimeCard/TimeCard.tsx","App.tsx","serviceWorker.js","index.js"],"names":["TimeCard","props","eta","arrT","prdt","now","moment","utc","format","then","react_default","a","createElement","diff","App","_Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","isLoaded","arrivals","time","Date","inherits","createClass","key","value","setState","_this2","axios","get","concat","result","data","_this$state","ctatt","map","Components_TimeCard_TimeCard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4SAyBeA,EAhBE,SAACC,GAAkB,IAC1BC,EAAQD,EAARC,IACAC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,KAEVC,EAAMC,IAAOC,IAAIH,GAAMI,OAAO,uBAC9BC,EAAOH,IAAOC,IAAIJ,GAAMK,OAAO,uBAEnC,OACEE,EAAAC,EAAAC,cAAA,UACGN,IACEC,IAAID,IAAOG,EAAM,uBAAuBI,KAAKP,IAAOD,EAAK,yBACzDG,OAAO,QC2GDM,EAtGf,SAAAC,GACE,SAAAD,EAAYb,GAAY,IAAAe,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACtBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMlB,KACDsB,MAAQ,CACXC,OAAO,EACPC,UAAU,EACVC,SAAU,GACVC,KAAM,IAAIC,MANUZ,EAD1B,OAAAC,OAAAY,EAAA,EAAAZ,CAAAH,EAAAC,GAAAE,OAAAa,EAAA,EAAAb,CAAAH,EAAA,EAAAiB,IAAA,OAAAC,MAAA,WAcIb,KAAKc,SAAS,CACZN,KAAM,IAAIC,SAfhB,CAAAG,IAAA,qBAAAC,MAAA,WAyBuB,IAAAE,EAAAf,KACnBgB,IACGC,IACI,uCAFPC,OAAA,6HAIG5B,KAAK,SAAA6B,GAEJJ,EAAKD,SAAS,CACZR,UAAU,EACVC,SAAUY,EAAOC,WAlC3B,CAAAR,IAAA,SAAAC,MAAA,WAmFW,IAAAQ,EAC+BrB,KAAKI,MAAnCC,EADDgB,EACChB,MAAOC,EADRe,EACQf,SAAUC,EADlBc,EACkBd,SACzB,OAAIF,EACKd,EAAAC,EAAAC,cAAA,sBACGa,EAIRf,EAAAC,EAAAC,cAAA,UACGc,EAASe,MAAMvC,IAAIwC,IAAI,SAACf,EAAWI,GAAZ,OAEtBrB,EAAAC,EAAAC,cAAC+B,EAAD,CAAUZ,IAAKA,EAAK7B,IAAKyB,OANxBjB,EAAAC,EAAAC,cAAA,6BAxFbE,EAAA,CAAyB8B,aCbLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhD,KAAK,SAAAiD,GACjCA,EAAaC","file":"static/js/main.04ecf4a0.chunk.js","sourcesContent":["import React from 'react';\nimport { Eta } from '../../Data/cta_dto';\n\nimport moment from 'moment';\n\ninterface IProps {\n  eta: Eta;\n}\n\nconst TimeCard = (props: IProps) => {\n  const { eta } = props;\n  const { arrT, prdt } = eta;\n\n  var now = moment.utc(prdt).format('DD/MM/YYYY HH:mm:ss');\n  var then = moment.utc(arrT).format('DD/MM/YYYY HH:mm:ss');\n\n  return (\n    <li>\n      {moment\n        .utc(moment(then, 'DD/MM/YYYY HH:mm:ss').diff(moment(now, 'DD/MM/YYYY HH:mm:ss')))\n        .format('mm')}\n    </li>\n  );\n};\n\nexport default TimeCard;\n","import React, { Component } from 'react'; // let's also import Component\nimport './App.css';\nimport logo from './logo.svg';\nimport axios from 'axios';\n// import { CTA_DTO } from './Data/cta_dto';\nimport { RootObject, Eta, Ctatt } from './Data/cta_dto';\nimport TimeCard from './Components/TimeCard/TimeCard';\nimport * as moment from 'moment';\n\n// the clock's state has one field: The current time, based upon the\n// JavaScript class Date\ntype ClockState = {\n  time: Date;\n};\n\ninterface IState {\n  error: boolean;\n  isLoaded: boolean;\n  arrivals: RootObject;\n  time: Date;\n}\n\n// Clock has no properties, but the current state is of type ClockState\n// The generic parameters in the Component typing allow to pass props\n// and state. Since we don't have props, we pass an empty object.\nexport class App extends Component<{}, IState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      error: false,\n      isLoaded: false,\n      arrivals: {} as RootObject,\n      time: new Date()\n    };\n  }\n\n  // The tick function sets the current state. TypeScript will let us know\n  // which ones we are allowed to set.\n  tick() {\n    this.setState({\n      time: new Date()\n    });\n  }\n\n  // Before the component mounts, we initialise our state\n  // componentWillMount() {\n  //   this.tick();\n  // }\n\n  // After the component did mount, we set the state each second.\n  componentWillMount() {\n    axios\n      .get<RootObject>(\n        `${'https://cors-anywhere.herokuapp.com/'}https://lapi.transitchicago.com/api/1.0/ttarrivals.aspx?key=d4102257b59c4a0a82809fec190a2140&outputType=JSON&mapid=40360`\n      )\n      .then(result => {\n        // debugger;\n        this.setState({\n          isLoaded: true,\n          arrivals: result.data\n        });\n        // console.log(this.state.arrivals);\n      });\n  }\n\n  // // render will know everything!\n  // render() {\n  //   const { arrivals } = this.state;\n  //   return (\n  //     <div className=\"App\">\n  //       <header className=\"App-header\">\n  //         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n  //         {/* <div>\n  //           {arrivals && (\n  //             <div>\n  //               {arrivals.ctatt && (\n  //                 <div>\n  //                   {arrivals.ctatt.eta && (\n  //                     <div>\n  //                       {arrivals.ctatt.eta.map((time: CTA_DTO.Eta, key) => {\n  //                         return (\n  //                           <div key={key}>\n  //                             <TimeCard times={time} />\n  //                           </div>\n  //                         );\n  //                       })}\n  //                     </div>\n  //                   )}\n  //                 </div>\n  //               )}\n  //             </div>\n  //           )}\n  //         </div> */}\n\n  //         <a\n  //           className=\"App-link\"\n  //           href=\"https://reactjs.org\"\n  //           target=\"_blank\"\n  //           rel=\"noopener noreferrer\"\n  //         >\n  //           Learn React\n  //         </a>\n  //       </header>\n  //     </div>\n  //   );\n  // }\n\n  render() {\n    const { error, isLoaded, arrivals } = this.state;\n    if (error) {\n      return <div>Error: </div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <ul>\n          {arrivals.ctatt.eta.map((time: Eta, key) => (\n            // <li key={key}>{moment.utc(time.arrT).format('h:mm:ss a')}</li>\n            <TimeCard key={key} eta={time} />\n          ))}\n        </ul>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}